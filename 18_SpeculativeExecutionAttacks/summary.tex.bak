Speculative execution optimizes performance by executing instructions before knowing if they're needed, leaving microarchitectural traces in cache memory even when results are discarded. Attacks like Meltdown and Spectre exploit this by constructing code sequences where a secret value determines which memory addresses are accessed during speculation. By measuring which addresses load quickly afterward (indicating they were cached), attackers can determine if specific bits were 0 or 1 allowing secrets to be extracted across privilege boundaries.
